package main.model;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.*;

/**
 * Recipe object to be stored in database.
 * @author tmati
 *
 */
@Entity
@Table(name="recipe")
public class Recipe {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int recipeId;
	
	/**
	 * Name for recipe
	 */
	@Column(name="recipename")
	private String recipename;
	
	/**
	 * Amount of food generated by this recipe(or for how many people, etc...)
	 */
	@Column(name="amount")
	private String amount;

	/**
	 * Detailed description on how to complete the recipe
	 */
	@Column(name="description", columnDefinition="LONGTEXT")
	private String description;
	
	/**
	 * Category of recipe
	 */
	@ManyToOne(targetEntity = Category.class, fetch=FetchType.EAGER)
	private Category category;
	
	/**
	 * Arraylist of Ingredient objects to be printed with description
	 */
	@ElementCollection(fetch=FetchType.EAGER)
	private List<Ingredient> ingredients = new ArrayList<Ingredient>();
	
	public Recipe() {
	}
	
	/**
	 * Parameterized constructor.
	 * @param name
	 * @param amount
	 * @param description
	 * @param category
	 * @param ingredients
	 */
	public Recipe(String name, String amount, String description, Category category, List<Ingredient> ingredients) {
		this.recipename = name;
		this.amount = amount;
		this.description = description;
		this.category = category;
		this.ingredients = ingredients;
	}	
	
	/**
	 * String representation of recipe with its ingredients.
	 */
	public String toString() {
		String ingredientsList = "";
		for (Ingredient i : this.ingredients) {
			if (i.getAmount() == 0) {
				ingredientsList = ingredientsList.concat("\n" + i.getName() + "\n\n");
			} else {
				ingredientsList = ingredientsList.concat(i.getAmount() + " " + i.getMeasure() + " " + i.getName() + "\n");
			}
		}
		return this.recipename + "\n" + this.category.getCategoryDescription() + "\n" + this.amount + "\n\n" + ingredientsList + "\n\n"
				+ this.description;
	}
	
	public String getRecipename() {
		return recipename;
	}

	public void setRecipename(String recipename) {
		this.recipename = recipename;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Category getCategory() {
		return category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	public List<Ingredient> getIngredients() {
		return ingredients;
	}

	public void setIngredients(List<Ingredient> ingredients) {
		this.ingredients = ingredients;
	}

	public String getAmount() {
		return amount;
	}

	public void setAmount(String amount) {
		this.amount = amount;
	}

	public int getRecipeId() {
		return recipeId;
	}
	
}
